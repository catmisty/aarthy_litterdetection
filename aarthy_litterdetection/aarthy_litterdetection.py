# -*- coding: utf-8 -*-
"""Aarthy_litterdetection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ENSHkpIBX_zt1tdIdRAItR2DppA6v6t4

# collecting image

mount drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""TACO"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/pedropro/TACO.git
# %cd TACO

"""Download the TACO dataset"""

!python download.py

!pip install -r requirements.txt
!pip install torch torchvision torchaudio
!pip install tensorflow

"""Set Up YOLOv5 for Training"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5

!pip install -r requirements.txt

"""Convert TACO Annotations to YOLO Format"""

import json
import os

# Load the TACO annotations
with open('/content/TACO/data/annotations.json') as f:
    taco_data = json.load(f)

output_dir = '/content/TACO/labels/'
os.makedirs(output_dir, exist_ok=True)

# Function to convert TACO bbox format to YOLO format
def convert_bbox(size, box):
    dw = 1. / size[0]
    dh = 1. / size[1]
    x_center = box[0] + box[2] / 2.0
    y_center = box[1] + box[3] / 2.0
    width = box[2]
    height = box[3]
    return x_center * dw, y_center * dh, width * dw, height * dh

# Process each image annotation
for ann in taco_data['annotations']:
    image_id = ann['image_id']
    image = next(img for img in taco_data['images'] if img['id'] == image_id)

    # Open the corresponding label file
    label_file = os.path.join(output_dir, f"{image_id}.txt")
    with open(label_file, 'a') as lf:
        # Convert the bbox to YOLO format
        bbox = convert_bbox((image['width'], image['height']), ann['bbox'])
        category_id = ann['category_id'] - 1  # YOLO classes start from 0
        # Write to the label file: class_id x_center y_center width height
        lf.write(f"{category_id} {' '.join(map(str, bbox))}\n")

!ls /content/TACO/

!ls /content/TACO/data/

"""Organize the Dataset"""

!mkdir -p /content/TACO/images/train /content/TACO/images/val /content/TACO/labels/train /content/TACO/labels/val

import os

os.makedirs('/content/TACO/images/train', exist_ok=True)
os.makedirs('/content/TACO/images/val', exist_ok=True)

import shutil
import random
from glob import glob
import os

# Create directories for train and val sets
os.makedirs('/content/TACO/images/train', exist_ok=True)
os.makedirs('/content/TACO/images/val', exist_ok=True)
os.makedirs('/content/TACO/labels/train', exist_ok=True)
os.makedirs('/content/TACO/labels/val', exist_ok=True)

# Get a list of all batch directories
batch_dirs = glob('/content/TACO/data/batch_*')

image_files = []
for batch_dir in batch_dirs:
    # Get a list of all images in each batch directory
    image_files.extend(glob(os.path.join(batch_dir, '*.jpg')))

# Shuffle and split images into train/val
random.shuffle(image_files)
train_size = int(0.8 * len(image_files))
train_files = image_files[:train_size]
val_files = image_files[train_size:]

# Function to rename and move files to avoid overwriting
def move_files(file_list, dest_dir):
    for file in file_list:
        base_name = os.path.basename(file)
        dest_file = os.path.join(dest_dir, base_name)

        # Rename file if a file with the same name already exists
        counter = 1
        while os.path.exists(dest_file):
            name, ext = os.path.splitext(base_name)
            dest_file = os.path.join(dest_dir, f"{name}_{counter}{ext}")
            counter += 1

        print(f"Moving {file} to {dest_file}")  # Debugging statement
        shutil.move(file, dest_file)

# Move the files to train/val directories
move_files(train_files, '/content/TACO/images/train/')
move_files(val_files, '/content/TACO/images/val/')

# Function to rename and move labels to avoid overwriting
def move_labels(file_list, dest_dir):
    for file in file_list:
        label_file = file.replace('.jpg', '.txt')
        if os.path.exists(label_file):
            base_name = os.path.basename(label_file)
            dest_file = os.path.join(dest_dir, base_name)

            # Rename file if a file with the same name already exists
            counter = 1
            while os.path.exists(dest_file):
                name, ext = os.path.splitext(base_name)
                dest_file = os.path.join(dest_dir, f"{name}_{counter}{ext}")
                counter += 1

            print(f"Moving {label_file} to {dest_file}")  # Debugging statement
            shutil.move(label_file, dest_file)

# Move the labels to corresponding train/val directories
move_labels(train_files, '/content/TACO/labels/train/')
move_labels(val_files, '/content/TACO/labels/val/')

# Function to rename and move labels to avoid overwriting
def move_labels(file_list, dest_dir):
    for file in file_list:
        label_file = file.replace('.jpg', '.txt')
        if os.path.exists(label_file):
            base_name = os.path.basename(label_file)
            dest_file = os.path.join(dest_dir, base_name)

            # Rename file if a file with the same name already exists
            counter = 1
            while os.path.exists(dest_file):
                name, ext = os.path.splitext(base_name)
                dest_file = os.path.join(dest_dir, f"{name}_{counter}{ext}")
                counter += 1

            shutil.move(label_file, dest_file)

# Move the labels to corresponding train/val directories
move_labels(train_files, '/content/TACO/labels/train/')
move_labels(val_files, '/content/TACO/labels/val/')

data_yaml = """
train: /content/TACO/images/train/
val: /content/TACO/images/val/
test: /content/TACO/images/test/

nc: 10  # Number of classes in TACO
names: ['Plastic', 'Paper', 'Metal', 'Glass', 'Trash', 'Organic Waste', 'Other', 'Rubber', 'Textile', 'Wood']
"""

with open('/content/yolov5/data/taco.yaml', 'w') as f:
    f.write(data_yaml)

!ls /content/TACO/images/train

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov5/

!ls /content/TACO/images/train

!ls /content/yolov5/data/taco.yaml

"""Train the YOLOv5 Model"""

!python train.py --img 640 --batch 16 --epochs 50 --data /content/yolov5/data/taco.yaml --weights yolov5s.pt

